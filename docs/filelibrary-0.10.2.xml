<?xml version="1.0" encoding="UTF-8"?>
<keywordspec format="ROBOT" type="library" generated="20181022 12:00:23" name="FileLibrary">
<version>0.10.2</version>
<scope>test suite</scope>
<namedargs>yes</namedargs>
<doc>FileLibrary is a Robot Framework test library for generating test data files.

Built in variables: ${now}, ${today}

For SQL related commands, you can specify SQL satements either directly in the argument or provide them in an .sql file. 


 | *IMPORTANT* | For statements included directly in the test case, you need to escape any template data variables. If you do not, it will not be able to find the value. | 
 | _Example_ | Execute SQL	update mytable set value = 2 where id = \${my_id} | 
</doc>
<init>
<arguments>
<arg>path=</arg>
<arg>debug=False</arg>
</arguments>
<doc>FileLibrary is a Robot Framework test library for generating test data files.

Built in variables: ${now}, ${today}

For SQL related commands, you can specify SQL satements either directly in the argument or provide them in an .sql file. 


 | *IMPORTANT* | For statements included directly in the test case, you need to escape any template data variables. If you do not, it will not be able to find the value. | 
 | _Example_ | Execute SQL	update mytable set value = 2 where id = \${my_id} |</doc>
<tags>
</tags>
</init>
<kw name="Apply XSLT">
<arguments>
<arg>sourceFile</arg>
<arg>templateFile</arg>
<arg>targetFile</arg>
</arguments>
<doc>Apply XSLT. Transforms XML file by applying an xlst transformation.
Usage:
| Apply XSLT | _sourceFile_ | _templateFile_ | _targetFile_|</doc>
<tags>
</tags>
</kw>
<kw name="Call Procedure">
<arguments>
<arg>sql</arg>
<arg>*values</arg>
</arguments>
<doc>Call a stored procedure with the given parameters 
Example: Call Procedure    {call robot.hello_world (?,?,?,?)}     name    123456    45.66    {d}2016-01-21
Most parameter types will be detected and converted automatically, however sometimes you might need to specify the type. 
    - Use {i} to pass the value as a number
    - Use {f} to pass the value as a decimal
    - Use {d} to pass the value as a date in format yyyy-mm-dd</doc>
<tags>
</tags>
</kw>
<kw name="Concatenate Files">
<arguments>
<arg>targetFile</arg>
<arg>*sourceFiles</arg>
</arguments>
<doc>Concatenate multiple files into a single file. If the target file already exists, it will be appended to.

Usage:
| Concatenate Files | _targetFile_ | _sourceFile1_ | _sourceFile2_ |
| Concatenate Files | _targetFile_ | _sourceFile1_ | _sourceFile2_ | _sourceFile3_ |</doc>
<tags>
</tags>
</kw>
<kw name="Connect">
<arguments>
<arg>url</arg>
<arg>user</arg>
<arg>password</arg>
</arguments>
<doc>Connect to database using the specified arguments</doc>
<tags>
</tags>
</kw>
<kw name="Disconnect">
<arguments>
</arguments>
<doc>Close SQL session</doc>
<tags>
</tags>
</kw>
<kw name="Execute Query">
<arguments>
<arg>sql</arg>
</arguments>
<doc>Execute SQL Query. Returns a list of values. When the query selects a single column, a simple list of values is returned.
When the query selects multiple columns a list of lists is returned.
Example usage:
 | @{singleColResult}= | Execute Query | select 1 from dual union select 2 from dual | 
 | Log Many | @{singleColResult} | | 
 | @{multiColResult}= | Execute Query | select 1,2 from dual union select 3,4 from dual | 
 | Log Many | ${singleColResult[2]} | |</doc>
<tags>
</tags>
</kw>
<kw name="Execute Single Result Query">
<arguments>
<arg>sql</arg>
</arguments>
<doc>Execute SQL Query and results a single result. See Execute Query for details</doc>
<tags>
</tags>
</kw>
<kw name="Execute SQL">
<arguments>
<arg>sql</arg>
</arguments>
<doc>Execute SQL INSERT or UPDATE statement(s). Specify either an SQL directly or the path to a .sql file. No results are returned from this keyword.</doc>
<tags>
</tags>
</kw>
<kw name="Generate File">
<arguments>
<arg>templateFile</arg>
<arg>outputFile</arg>
</arguments>
<doc>Generate a file based on a Freemarker template. Before using this keyword, you need to populate the Template Data using the 
Set Template Data...
 keywords.
All template data that is available can be referenced from within the Freemarker template using variables. E.g. ${soup.color}

Usage:
| Generate File | _templateFile_ | _outputFile_ |</doc>
<tags>
</tags>
</kw>
<kw name="Get File Library Server Pid">
<arguments>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Get Random UUID">
<arguments>
</arguments>
<doc></doc>
<tags>
</tags>
</kw>
<kw name="Get Template Data">
<arguments>
<arg>attribute</arg>
</arguments>
<doc>Get a specific value from the template data context.</doc>
<tags>
</tags>
</kw>
<kw name="Get Template Data As JSON">
<arguments>
<arg>attribute</arg>
</arguments>
<doc>Get a specific value from the template data context and return it as a JSON String</doc>
<tags>
</tags>
</kw>
<kw name="Get Template Data As Variable">
<arguments>
<arg>attribute</arg>
</arguments>
<doc>Get a specific value from the template data context and return it as an object (so no to string conversion)</doc>
<tags>
</tags>
</kw>
<kw name="Log Template Data">
<arguments>
<arg>outputFile=</arg>
</arguments>
<doc>Print all content of the template data as JSON. When an optional file name argument is supplied, the template context is also saved as a JSON File.</doc>
<tags>
</tags>
</kw>
<kw name="Refresh Tables">
<arguments>
<arg>xlsFilename</arg>
<arg>schema=</arg>
<arg>*primaryKeys</arg>
</arguments>
<doc>Reload database tables content with the content in the specified xls/xml file. Existing rows are updated. Missing rows are added. Uses DBUnit REFRESH to perform the update.If the database does not have proper primary keys, you can specify custom primary keys per table in the format TABLE=KEY1,KEY2.
When using this option, no default primary keys will be used. You will have to specify the primary keys for all tables included in the file.Example usage:
 | replaceTables | data.xlsx | MYSCHEMA | EMPLOYEE=FIRSTNAME,LASTNAME | EMPLOYER=NAME |</doc>
<tags>
</tags>
</kw>
<kw name="Replace Tables">
<arguments>
<arg>xlsFilename</arg>
<arg>schema</arg>
<arg>*primaryKeys</arg>
</arguments>
<doc>Replace all database table content with the content in the specified xls/xml file. Uses DBUnit CLEAN_INSERT to perform the update.
If the database does not have proper primary keys, you can specify custom primary keys per table in the format TABLE=KEY1,KEY2.
When using this option, no default primary keys will be used. You will have to specify the primary keys for all tables included in the file.Example usage:
 | replaceTables | data.xlsx | MYSCHEMA | EMPLOYEE=FIRSTNAME,LASTNAME | EMPLOYER=NAME |</doc>
<tags>
</tags>
</kw>
<kw name="Reset Template Data">
<arguments>
<arg>initialize=</arg>
</arguments>
<doc>Clear the template data. All existing data. When the optional argument True is given; the cleared template data will be preloaded with test variables.</doc>
<tags>
</tags>
</kw>
<kw name="Set Query Time Out">
<arguments>
<arg>seconds</arg>
</arguments>
<doc>Set timeout for SQL executions. The default timeout is 30 seconds.</doc>
<tags>
</tags>
</kw>
<kw name="Set Template Data">
<arguments>
<arg>attribute</arg>
<arg>value</arg>
</arguments>
<doc>Set a variable in the template context. The value can be either a string or a JSON string.</doc>
<tags>
</tags>
</kw>
<kw name="Set Template Data From CSV">
<arguments>
<arg>attribute</arg>
<arg>csvFilePath</arg>
</arguments>
<doc>Load template data from CSV.</doc>
<tags>
</tags>
</kw>
<kw name="Set Template Data From SQL">
<arguments>
<arg>attribute</arg>
<arg>sql</arg>
</arguments>
<doc>Load template data from SQL results. Specify either an SQL to execute or the path to a .sql file.

Example uses:


Usage:
| Set Template Data From SQL | _attributePath_ | _sql_ |
| Set Template Data From SQL | _attributePath_ | _sqlFile_ |
Example usage:

| Set Template Data From SQL | soup | soup-select.sql |
| Set Template Data From SQL | soup | select brand, type, color from soups where id = 1 |
| Set Template Data From SQL | soup.ingredients[] | select i.name from ingredients i, soup_ingredients si where i.id = si.ingredient_id and si.soup_id = 1 |
| Set Template Data From SQL | soup.ingredients[].suppliers | select s.name from suppliers s, ingredient_suppliers is where s.id = is.supplier_id and is.ingredient_name = \${soup.ingredients[].name}  |
| Set Template Data From SQL | soup.ingredients[].suppliers[].contact | select c.phone from supplier_contact c where c.supplier_name = \${soup.ingredients[].suppliers[].name} |


The examples shown above could result in the following template data structure:

| { "soup": {
|      "brand" : "Campbells",
|      "type" : "Tomato",
|      "color" : "red",
|      "ingredients" : [
|          {
|             "name" : "tomato",
|             "suppliers" : [
|                { 
|                   "name" : "the best tomato company" ,
|                   "contact" : {
|                      "phone" : "555-555.555"
|                   }
|                },
|                { 
|                   "name" : "the second best tomato company",
|                   "contact" : {
|                      "phone" : "666-666.666"
|                   }
|                }
|             ]
|          },
|          {
|             "name" : "potato",
|             "suppliers" : [
|                { "name" : "the only potato company" }
|             ]            
|          },
|          {
|             "name" : "water",
|             "suppliers" : []            
|          },
|          {
|             "name" : "pepper",
|             "suppliers" : [
|                { "name" : "the sweet pepper company" },
|                { "name" : "the spicy pepper company" }
|             ]               
|          }
|       ]
|    }
| }</doc>
<tags>
</tags>
</kw>
<kw name="Stop">
<arguments>
</arguments>
<doc>Stop remote library.</doc>
<tags>
</tags>
</kw>
<kw name="Verify Files Are Equal">
<arguments>
<arg>file1</arg>
<arg>file2</arg>
</arguments>
<doc>Verify that the content of two files matches. Files are compared line by line.

Usage:
| Verify Files Are Equal | _file1_ | _file2_ |</doc>
<tags>
</tags>
</kw>
<kw name="Verify SQL Result">
<arguments>
<arg>sql</arg>
<arg>*values</arg>
</arguments>
<doc>Execute a SQL statement or .sql file and verify that returned values match the expected values.</doc>
<tags>
</tags>
</kw>
<kw name="Verify XML Files Are Equal">
<arguments>
<arg>file1</arg>
<arg>file2</arg>
<arg>*filters</arg>
</arguments>
<doc>Verify that the content of two xml files matches.
 Whitespace and formatting is ignored.
Replace values of nodes or attributes with the string {IGNORE} to exclude them from comparisson.
Provide xpath filters to exclude certain nodes from comparison. (only basic xpath support)

Usage:
| Verify XML Files Are Equal | _file1_ | _file2_ |
| Verify XML Files Are Equal | _file1_ | _file2_ | _xpathFilter1_ 
| Verify XML Files Are Equal | _file1_ | _file2_ | _xpathFilter1_ | _xpathFilter2_</doc>
<tags>
</tags>
</kw>
<kw name="Zip Files">
<arguments>
<arg>targetFile</arg>
<arg>*sourceFiles</arg>
</arguments>
<doc>Compress multiple files into a single zip file.

Usage:
| Compress Files | _targetFile_ | _sourceFile1_ |  | |
| Compress Files | _targetFile_ | _sourceFile1_ | _sourceFile2_ | _sourceFile3_ |</doc>
<tags>
</tags>
</kw>
</keywordspec>
